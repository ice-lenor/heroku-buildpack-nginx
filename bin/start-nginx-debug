#!/usr/bin/env bash

psmgr=/tmp/nginx-buildpack-wait
rm -f $psmgr
mkfifo $psmgr

# Evaluate config to get $PORT
erb config/nginx.conf.erb > config/nginx.conf

n=1
while getopts :f option ${@:1:2}
do
  case "${option}"
  in
    f) FORCE=$OPTIND; n=$((n+1));;
  esac
done

# Initialize log directory.
echo "!!!!! echoing /tmp"
echo '/tmp'
touch /tmp/aaa.txt
echo "1234" > /tmp/aa1234.txt
echo "2345" > /var/tmp/aa2345.txt
echo "3456" > /usr/tmp/aa3456.txt
echo "4567" > ${BUILD_DIR}/aa4567.txt
echo "5678" > $BUILD_DIR/aa5678.txt
echo '!!!!! Initializing logs, path: /tmp'
echo '!!!!! Initializing logs, ls:'
mkdir -p /tmp/logs/nginx
touch /tmp/logs/nginx/access.log /tmp/logs/nginx/error.log
echo '!!!!! Initialized logs, ls in /tmp folder:'
ls /tmp
echo '!!!!! Initialized logs, ls in ./logs folder:'
ls /tmp/logs
echo '!!!!! Initializing logs, ls in ./logs/nginx folder:'
ls /tmp/logs/nginx/
echo 'buildpack=nginx at=logs-initialized'

# Start log redirection.
(
  # Redirect nginx logs to stdout.
  tail -qF -n 0 logs/nginx/*.log
  echo 'logs' >$psmgr
) &

# Start App Server
(
  # Take the command passed to this bin and start it.
  # E.g. bin/start-nginx bundle exec unicorn -c config/unicorn.rb
  COMMAND=${@:$n}
  echo "buildpack=nginx at=start-app cmd=$COMMAND"
  $COMMAND
  echo 'app' >$psmgr
) &

if [[ -z "$FORCE" ]]
then
  FILE="/tmp/app-initialized"

  # We block on app-initialized so that when nginx binds to $PORT
  # are app is ready for traffic.
  while [[ ! -f "$FILE" ]]
  do
    echo 'buildpack=nginx at=app-initialization'
    sleep 1
  done
  echo 'buildpack=nginx at=app-initialized'
fi

# Start nginx
(
  # We expect nginx to run in foreground.
  # We also expect a socket to be at /tmp/nginx.socket.
  echo 'buildpack=nginx at=nginx-start'
  bin/nginx-debug -p . -c config/nginx.conf
  echo 'nginx' >$psmgr
) &

# This read will block the process waiting on a msg to be put into the fifo.
# If any of the processes defined above should exit,
# a msg will be put into the fifo causing the read operation
# to un-block. The process putting the msg into the fifo
# will use it's process name as a msg so that we can print the offending
# process to stdout.
read exit_process <$psmgr
echo "buildpack=nginx at=exit process=$exit_process"
exit 1
